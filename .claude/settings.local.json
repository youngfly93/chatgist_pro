{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm init:*)",
      "Bash(npm i:*)",
      "Bash(npm create:*)",
      "Bash(chmod:*)",
      "Bash(npm run dev:*)",
      "Bash(pkill:*)",
      "WebFetch(domain:www.volcengine.com)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "WebFetch(domain:117.72.75.45)",
      "Bash(curl:*)",
      "Bash(npm run build:*)",
      "Bash(git pull:*)",
      "Bash(ls:*)",
      "Bash(npm run install:all:*)",
      "Bash(grep:*)",
      "Bash(cp:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(find:*)",
      "Bash(diff:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(R:*)",
      "Bash(bash:*)",
      "Bash(git rm:*)",
      "Bash(rm:*)",
      "Bash(touch:*)",
      "Bash(node:*)",
      "Bash(mv:*)",
      "Bash(tasklist:*)",
      "Bash(taskkill:*)",
      "Bash(powershell:*)",
      "Bash(dir)",
      "Bash(/e/R-4.4.1/bin/Rscript:*)",
      "Bash(echo $SHELL)",
      "Bash(cmd.exe:*)",
      "Bash(E:/R-4.4.1/bin/Rscript.exe --vanilla -e \"tryCatch(source(''transcriptome_plumber_api.R'', echo=FALSE), error=function(e) cat(''源代码错误:'', e$message))\")",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla check_transcriptome_syntax.R)",
      "Bash(git checkout:*)",
      "Bash(where:*)",
      "Bash(E:R-4.4.1binRscript.exe --vanilla singlecell_api_adapter.R --function=query --gene=KIT)",
      "Bash(cmd:*)",
      "Bash(echo $PATH)",
      "Bash(start \"\" E:R-4.4.1binRscript.exe --vanilla run_singlecell_plumber.R)",
      "Bash(start \"\" \"F:\\work\\claude_code\\chatgist_pro\\start_singlecell_api.bat\")",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla singlecell_api_adapter.R --help)",
      "Bash(run_singlecell_analysis.bat --function=query --gene=KIT)",
      "Bash(set SINGLECELL_PLUMBER_ENABLED=true)",
      "Bash(npm:*)",
      "Bash(dir:*)",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla -e \"\ntryCatch({\n  source(''pathway_final.R'')\n  cat(''富集分析函数加载成功\\n'')\n  # 检查数据文件\n  if (file.exists(''Protemics_list.rds'')) {\n    cat(''主数据文件存在\\n'')\n  } else {\n    cat(''主数据文件缺失\\n'')\n  }\n  if (file.exists(''GSEA_KEGG.gmt'')) {\n    cat(''KEGG GMT文件存在\\n'')\n  }\n  if (file.exists(''GSEA_hallmark.gmt'')) {\n    cat(''Hallmark GMT文件存在\\n'')\n  }\n}, error = function(e) {\n  cat(''错误:'', e$message, ''\\n'')\n})\n\")",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla -e \"\ntryCatch({\n  setwd(''GIST_Protemics'')\n  source(''pathway_final.R'')\n  cat(''富集分析函数加载成功\\n'')\n  # 检查数据文件\n  if (file.exists(''Protemics_list.rds'')) {\n    cat(''主数据文件存在\\n'')\n  } else {\n    cat(''主数据文件缺失\\n'')\n  }\n  if (file.exists(''GSEA_KEGG.gmt'')) {\n    cat(''KEGG GMT文件存在\\n'')\n  }\n  if (file.exists(''GSEA_hallmark.gmt'')) {\n    cat(''Hallmark GMT文件存在\\n'')\n  }\n}, error = function(e) {\n  cat(''错误:'', e$message, ''\\n'')\n})\n\")",
      "Bash(start \"\" \"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla -e \"setwd(''GIST_Protemics''); if(file.exists(''pathway_final.R'')) cat(''pathway_final.R exists'') else cat(''pathway_final.R missing'')\")",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla -e \"\n# 测试KIT基因的相关性数据\nsetwd(''F:/work/claude_code/chatgist_pro/GIST_Protemics'')\nif (file.exists(''Protemics_list.rds'')) {\n  cat(''数据文件存在\\n'')\n  Protemics_list <- readRDS(''Protemics_list.rds'')\n  cat(''数据集数量:'', length(Protemics_list), ''\\n'')\n  \n  # 检查KIT基因是否存在\n  found_in_datasets <- c()\n  for (i in 1:length(Protemics_list)) {\n    if (!is.null(Protemics_list[[i]]$Matrix)) {\n      if (''KIT'' %in% rownames(Protemics_list[[i]]$Matrix)) {\n        found_in_datasets <- c(found_in_datasets, i)\n        cat(''KIT found in dataset'', i, ''\\n'')\n      }\n    }\n  }\n  \n  if (length(found_in_datasets) > 0) {\n    cat(''KIT基因存在于'', length(found_in_datasets), ''个数据集中\\n'')\n  } else {\n    cat(''未找到KIT基因\\n'')\n  }\n} else {\n  cat(''数据文件不存在\\n'')\n}\n\")",
      "Bash(\"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla -e \"\n# 测试KIT基因的相关性数据\nsetwd(''F:/work/claude_code/chatgist_pro/GIST_Protemics'')\nif (file.exists(''Protemics_list.rds'')) {\n  cat(''数据文件存在\\n'')\n  Protemics_list <- readRDS(''Protemics_list.rds'')\n  cat(''数据集数量:'', length(Protemics_list), ''\\n'')\n  \n  # 检查KIT基因是否存在\n  found_in_datasets <- c()\n  for (i in 1:length(Protemics_list)) {\n    if (!is.null(Protemics_list[[i]]$Matrix)) {\n      if (''KIT'' %in% rownames(Protemics_list[[i]]$Matrix)) {\n        found_in_datasets <- c(found_in_datasets, i)\n        cat(''KIT found in dataset'', i, ''\\n'')\n      }\n    }\n  }\n  \n  if (length(found_in_datasets) > 0) {\n    cat(''KIT基因存在于'', length(found_in_datasets), ''个数据集中\\n'')\n  } else {\n    cat(''未找到KIT基因\\n'')\n    # 显示前10个基因名称\n    if (length(Protemics_list) > 0 && !is.null(Protemics_list[[1]]$Matrix)) {\n      cat(''数据集1中的前10个基因:\\n'')\n      cat(paste(head(rownames(Protemics_list[[1]]$Matrix), 10), collapse='', ''), ''\\n'')\n    }\n  }\n} else {\n  cat(''数据文件不存在\\n'')\n}\n\")",
      "Bash(E:R-4.4.1binRscript.exe --vanilla -e \"setwd(''F:/work/claude_code/chatgist_pro/GIST_Protemics''); if (file.exists(''Protemics_list.rds'')) { cat(''数据文件存在\\n''); Protemics_list <- readRDS(''Protemics_list.rds''); cat(''数据集数量:'', length(Protemics_list), ''\\n''); found_in_datasets <- c(); for (i in 1:length(Protemics_list)) { if (!is.null(Protemics_list[[i]]$Matrix)) { if (''KIT'' %in% rownames(Protemics_list[[i]]$Matrix)) { found_in_datasets <- c(found_in_datasets, i); cat(''KIT found in dataset'', i, ''\\n''); } } }; if (length(found_in_datasets) > 0) { cat(''KIT基因存在于'', length(found_in_datasets), ''个数据集中\\n''); } else { cat(''未找到KIT基因\\n''); if (length(Protemics_list) > 0 && !is.null(Protemics_list[[1]]$Matrix)) { cat(''数据集1中的前10个基因:\\n''); cat(paste(head(rownames(Protemics_list[[1]]$Matrix), 10), collapse='', ''), ''\\n''); } } } else { cat(''数据文件不存在\\n'') }\")",
      "Bash(start \"\" \"E:\\R-4.4.1\\bin\\Rscript.exe\" --vanilla proteomics_plumber_api.R)",
      "Bash(start \"\" \"E:\\R-4.4.1\\bin\\Rscript.exe\" proteomics_plumber_api.R)"
    ],
    "deny": []
  }
}